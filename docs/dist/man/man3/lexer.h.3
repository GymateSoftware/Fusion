.TH "/home/jr/Code/GitHub/Luna/include/lexer.h" 3 "Tue Apr 11 2023" "Version 0.0.1" "Luna" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/jr/Code/GitHub/Luna/include/lexer.h
.SH SYNOPSIS
.br
.PP
\fC#include <ctype\&.h>\fP
.br
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBToken\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBTokenType\fP { \fBTOKEN_INTEGER\fP, \fBTOKEN_PLUS\fP, \fBTOKEN_MINUS\fP, \fBTOKEN_MULTIPLY\fP, \fBTOKEN_DIVIDE\fP, \fBTOKEN_MODULO\fP, \fBTOKEN_LPAREN\fP, \fBTOKEN_RPAREN\fP, \fBTOKEN_IDENTIFIER\fP, \fBTOKEN_STRING\fP, \fBTOKEN_EQUALS\fP, \fBTOKEN_EOF\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBadvance\fP ()"
.br
.ti -1c
.RI "bool \fBis_at_end\fP ()"
.br
.ti -1c
.RI "char \fBpeek\fP ()"
.br
.ti -1c
.RI "char \fBpeek_next\fP ()"
.br
.ti -1c
.RI "bool \fBmatch\fP (char expected)"
.br
.ti -1c
.RI "void \fBskip_whitespace\fP ()"
.br
.ti -1c
.RI "\fBToken\fP \fBmake_token\fP (\fBTokenType\fP type, const char *val)"
.br
.ti -1c
.RI "\fBToken\fP \fBmake_token_with_length\fP (\fBTokenType\fP type, int length)"
.br
.ti -1c
.RI "\fBToken\fP \fBerror_token\fP (const char *message)"
.br
.ti -1c
.RI "\fBToken\fP \fBnumber\fP ()"
.br
.ti -1c
.RI "\fBToken\fP \fBscan_token\fP ()"
.br
.ti -1c
.RI "void \fBinit_scanner\fP (const char *src)"
.br
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBTokenType\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITOKEN_INTEGER \fP\fP
.TP
\fB\fITOKEN_PLUS \fP\fP
.TP
\fB\fITOKEN_MINUS \fP\fP
.TP
\fB\fITOKEN_MULTIPLY \fP\fP
.TP
\fB\fITOKEN_DIVIDE \fP\fP
.TP
\fB\fITOKEN_MODULO \fP\fP
.TP
\fB\fITOKEN_LPAREN \fP\fP
.TP
\fB\fITOKEN_RPAREN \fP\fP
.TP
\fB\fITOKEN_IDENTIFIER \fP\fP
.TP
\fB\fITOKEN_STRING \fP\fP
.TP
\fB\fITOKEN_EQUALS \fP\fP
.TP
\fB\fITOKEN_EOF \fP\fP
.SH "Function Documentation"
.PP 
.SS "void advance ()"

.SS "\fBToken\fP error_token (const char * message)"

.SS "void init_scanner (const char * src)"

.SS "bool is_at_end ()"

.SS "\fBToken\fP make_token (\fBTokenType\fP type, const char * val)"

.SS "\fBToken\fP make_token_with_length (\fBTokenType\fP type, int length)"

.SS "bool match (char expected)"

.SS "\fBToken\fP number ()"

.SS "char peek ()"

.SS "char peek_next ()"

.SS "\fBToken\fP scan_token ()"

.SS "void skip_whitespace ()"

.SH "Author"
.PP 
Generated automatically by Doxygen for Luna from the source code\&.
